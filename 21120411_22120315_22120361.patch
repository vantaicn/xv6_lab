diff --git a/Makefile b/Makefile
index cee70f3..24e6309 100644
--- a/Makefile
+++ b/Makefile
@@ -194,6 +194,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\	
 
 
 
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..dcd26a9
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,81 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+
+char*
+get_last_component(char *path)
+{
+  char *p;
+
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+    ;
+  p++;
+  return p;
+}
+
+void
+find(char *path, char *name)
+{
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if((fd = open(path, O_RDONLY)) < 0){
+    fprintf(2, "find: cannot open %s\n", path);
+    return;
+  }
+
+  if(fstat(fd, &st) < 0){
+    fprintf(2, "find: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+
+  switch(st.type){
+  case T_DEVICE:
+  case T_FILE:
+    if (strcmp(get_last_component(path), name) == 0){
+        printf("%s\n", path);
+    }
+    break;
+
+  case T_DIR:
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+      printf("find: path too long\n");
+      break;
+    }
+    strcpy(buf, path);
+    p = buf+strlen(buf);
+    *p++ = '/';
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+      if(de.inum == 0)
+        continue;
+      memmove(p, de.name, DIRSIZ);
+      p[DIRSIZ] = 0;
+      if(stat(buf, &st) < 0){
+        printf("find: cannot stat %s\n", buf);
+        continue;
+      }
+      if(st.type == T_DIR && (strcmp(p, ".") == 0 || strcmp(p, "..") == 0))
+        continue;
+      find(buf, name);
+    }
+    break;
+  }
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+  if(argc == 2){
+    find(".", argv[1]);
+  }else if (argc == 3){
+    find(argv[1], argv[2]);
+  }
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..2137861
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,34 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    char buf[10];
+
+    int p[2];
+    pipe(p);
+
+    int pid;
+    pid = fork();
+
+    if (pid<0) {
+        printf("fork: failed\n");
+        exit(1);
+    } else if (pid == 0) {
+        read(p[0], buf, sizeof(buf));
+        close(p[0]);
+        printf("%d: received %s\n", getpid(), buf);
+        write(p[1], "pong",5);
+        close(p[1]);
+        exit(0);
+    } else {
+        write(p[1], "ping", 5);
+        close(p[1]);
+        wait(0);
+        read(p[0], buf, sizeof(buf));
+        close(p[0]);
+        printf("%d: received %s\n", getpid(), buf);
+        exit(0);
+    }
+}
\ No newline at end of file
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..f08d023
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,68 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+void primes(int*) __attribute__((noreturn));
+
+void primes(int* pre_p) {
+
+    close(pre_p[1]);
+
+    int prime;
+    if (read(pre_p[0], &prime, sizeof(prime)) == 0) {
+        close(pre_p[0]);
+        exit(0);
+    }
+    printf("prime %d\n", prime);
+    
+    int next_p[2];
+    pipe(next_p);
+    
+    int pId = fork();
+
+    if (pId < 0) {
+        printf("fork: failed.\n");
+        exit(1);
+    } else if (pId == 0) {
+        close(pre_p[0]);
+        primes(next_p);
+    } else {
+        int num;
+        close(next_p[0]);
+        while (read(pre_p[0], &num, sizeof(num)) != 0)
+        {
+            if (num % prime != 0) {
+                write(next_p[1], &num, sizeof(num));
+            }
+        }
+        close(pre_p[0]);
+        close(next_p[1]);
+        wait(0);
+        exit(0);
+    }
+}
+
+int
+main(int argc, char *argv[]) 
+{
+    int p[2];
+    pipe(p);
+
+    int pId = fork();
+
+    if (pId < 0) {
+        printf("fork: failed.\n");
+        exit(1);
+    } else if (pId == 0) {
+        primes(p);
+    }
+    else
+    {
+        close(p[0]);
+        for (int i = 2; i <= 280; i++)
+        {
+            write(p[1], &i, sizeof(i));
+        }
+        close(p[1]);
+        wait(0);
+    }
+}
\ No newline at end of file
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..62c273e
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,45 @@
+#include "kernel/types.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+int
+main(int argc, char *argv[])
+{
+    char* args[MAXARG];
+    char lines[1000];
+    int n;
+    if (argc > 1)
+    {
+        for (int i = 0; i < argc - 1; i++) {
+            args[i] = argv[i + 1];
+        }
+        while ((n = read(0, lines, sizeof(lines))) > 0) {
+            char *p = lines;
+            while (p < lines + n) {
+                char *line = p;
+                while (p < lines + n && *p != '\n') {
+                    ++p;
+                }
+                *p = '\0';
+                ++p;
+
+                args[argc - 1] = line;
+                args[argc] = 0;
+
+                int pId = fork();
+                if (pId < 0) {
+                    printf("fork: failed.\n");
+                    exit(1);
+                }
+                else if (pId == 0) {
+                    exec(args[0], args);
+                    exit(0);
+                }
+                else {
+                    wait(0);
+                }
+            }
+        }
+        exit(0);
+    }
+}
\ No newline at end of file
